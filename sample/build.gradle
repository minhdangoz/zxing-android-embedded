apply plugin: 'com.android.application'


Properties keystoreProperties = new Properties()
def keystorePropertiesFile = new File('keystore.properties')

if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else{
    println "--> keystore not exists"
}

android {
    compileSdkVersion project.androidTargetSdk

    defaultConfig {
        applicationId "com.mobilestartools.scannerdemo"
        multiDexEnabled true
        minSdkVersion 19
        targetSdkVersion project.androidTargetSdk
        versionCode 1
        versionName "1.0.1"
    }



    applicationVariants.all { variant ->
        if (variant.getBuildType().isMinifyEnabled()) {
            variant.assemble.doLast {
                copy {
                    from variant.mappingFile
                    into "${projectDir}/release"
                    rename { String fileName ->
                        "mapping-${versionName}.txt"
                    }
                }

                variant.outputs.each { output->
                    def apkProcess = output.getOutputFile();
                    copy {
                        from "$apkProcess"
                        into "${projectDir}/release"
                        // rename ("$apkProcess.name", "$apkProcessNewName")
                    }
                }
            }
        }

        if (variant.getBuildType().name == "release"){
            variant.outputs.all { output ->
                def apkName = "Star-Scanner-" + android.defaultConfig.versionName +"-release.apk"
                outputFileName = apkName
            }
        }

    }


    signingConfigs {
        if (keystorePropertiesFile.exists()) {
            register("release") {
                keyAlias = keystoreProperties.getProperty("keyAlias")
                keyPassword = keystoreProperties.getProperty("keyPassword")
                storeFile = file(keystoreProperties.getProperty("storeFile"))
                storePassword = keystoreProperties.getProperty("storePassword")
            }
        }
        config
    }


    buildTypes {
        release {
            if (keystorePropertiesFile.exists()) {
                signingConfig = signingConfigs.getByName("release")
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        // Error: The lint detector
        //    androidx.appcompat.view.OnClickXmlDetector
        // called context.getMainProject() during module analysis.
        disable 'UsingOnClickInXml'
    }
}


dependencies {
    // If you use this from an external project, use the following instead:
    //   implementation 'com.journeyapps:zxing-android-embedded:<version>'
    implementation project(':zxing-android-embedded')

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation "androidx.activity:activity:1.3.1"

    // Desugaring and multidex is required for API < 21.
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation 'androidx.multidex:multidex:2.0.1'

    // leakcanary is for development purposes only
    // https://github.com/square/leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    // AboutLibraries
    implementation 'com.mikepenz:aboutlibraries:6.2.3'
}
